/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for all data stored in Firestore.
 *
 * Data Structure:
 * - All user-related data is nested under the `/users/{userId}` path.
 * - AI agent interactions (e.g., QuranTutorInteractions, DoctorAssistantInteractions) are stored as subcollections under each user's document.
 * - Each interaction document includes a denormalized `userId` field to simplify authorization checks.
 *
 * Key Security Decisions:
 * - Users can only access their own data. Listing other user's data is explicitly denied.
 * - All write operations (create, update, delete) require the user to be the owner of the data.
 * - Data validation is limited to ensuring the consistency of the `userId` field across the path and the document.
 *
 * Denormalization for Authorization:
 * - The `userId` is included in each interaction document to avoid costly `get()` calls to the `/users/{userId}` document during authorization checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures the user profile document. Only the user can read and write their own profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their profile if request.auth.uid == 'user_abc'.
     * @allow (get) - User with UID 'user_abc' can read their profile if request.auth.uid == 'user_abc'.
     * @allow (update) - User with UID 'user_abc' can update their profile if request.auth.uid == 'user_abc'.
     * @allow (delete) - User with UID 'user_abc' can delete their profile if request.auth.uid == 'user_abc'.
     * @deny (create) - User with UID 'user_xyz' cannot create a profile for 'user_abc'.
     * @deny (get) - User with UID 'user_xyz' cannot read the profile of 'user_abc'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Helper function to check if the request is made by the owner of the user document.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the request is made by the existing owner of the user document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allows a user to create their own profile if the userId matches their auth UID.
      allow create: if isOwner(userId);

      // Allows a user to read their own profile.
      allow get: if isOwner(userId);

      // Allows a user to update their own profile.
      allow update: if isExistingOwner(userId);

      // Allows a user to delete their own profile.
      allow delete: if isExistingOwner(userId);

      // List is disallowed on the /users collection
      allow list: if false;

      /**
       * @description Secures interactions with the QuranTutor AI agent. Only the user can read and write their own interactions.
       * @path /users/{userId}/quranTutorInteractions/{interactionId}
       * @allow (create) - User with UID 'user_abc' can create an interaction if request.auth.uid == 'user_abc'.
       * @allow (get) - User with UID 'user_abc' can read their interaction if request.auth.uid == 'user_abc'.
       * @allow (update) - User with UID 'user_abc' can update their interaction if request.auth.uid == 'user_abc'.
       * @allow (delete) - User with UID 'user_abc' can delete their interaction if request.auth.uid == 'user_abc'.
       * @deny (create) - User with UID 'user_xyz' cannot create an interaction for 'user_abc'.
       * @deny (get) - User with UID 'user_xyz' cannot read an interaction of 'user_abc'.
       * @principle Enforces document ownership for writes.
       */
      match /quranTutorInteractions/{interactionId} {
        // Allows a user to create an interaction if the userId matches their auth UID.
        allow create: if isOwner(userId) && request.resource.data.userId == userId;

        // Allows a user to read their own interaction.
        allow get: if isOwner(userId);

        // Allows a user to list their own interactions.
        allow list: if isOwner(userId);

        // Allows a user to update their own interaction.
        allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;

        // Allows a user to delete their own interaction.
        allow delete: if isExistingOwner(userId);
      }

      /**
       * @description Secures interactions with the DoctorAssistant AI agent. Only the user can read and write their own interactions.
       * @path /users/{userId}/doctorAssistantInteractions/{interactionId}
       * @allow (create) - User with UID 'user_abc' can create an interaction if request.auth.uid == 'user_abc'.
       * @allow (get) - User with UID 'user_abc' can read their interaction if request.auth.uid == 'user_abc'.
       * @allow (update) - User with UID 'user_abc' can update their interaction if request.auth.uid == 'user_abc'.
       * @allow (delete) - User with UID 'user_abc' can delete their interaction if request.auth.uid == 'user_abc'.
       * @deny (create) - User with UID 'user_xyz' cannot create an interaction for 'user_abc'.
       * @deny (get) - User with UID 'user_xyz' cannot read an interaction of 'user_abc'.
       * @principle Enforces document ownership for writes.
       */
      match /doctorAssistantInteractions/{interactionId} {
        // Allows a user to create an interaction if the userId matches their auth UID.
        allow create: if isOwner(userId) && request.resource.data.userId == userId;

        // Allows a user to read their own interaction.
        allow get: if isOwner(userId);

        // Allows a user to list their own interactions.
        allow list: if isOwner(userId);

        // Allows a user to update their own interaction.
        allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;

        // Allows a user to delete their own interaction.
        allow delete: if isExistingOwner(userId);
      }

      /**
       * @description Secures interactions with the RealEstateAgent AI agent. Only the user can read and write their own interactions.
       * @path /users/{userId}/realEstateAgentInteractions/{interactionId}
       * @allow (create) - User with UID 'user_abc' can create an interaction if request.auth.uid == 'user_abc'.
       * @allow (get) - User with UID 'user_abc' can read their interaction if request.auth.uid == 'user_abc'.
       * @allow (update) - User with UID 'user_abc' can update their interaction if request.auth.uid == 'user_abc'.
       * @allow (delete) - User with UID 'user_abc' can delete their interaction if request.auth.uid == 'user_abc'.
       * @deny (create) - User with UID 'user_xyz' cannot create an interaction for 'user_abc'.
       * @deny (get) - User with UID 'user_xyz' cannot read an interaction of 'user_abc'.
       * @principle Enforces document ownership for writes.
       */
      match /realEstateAgentInteractions/{interactionId} {
        // Allows a user to create an interaction if the userId matches their auth UID.
        allow create: if isOwner(userId) && request.resource.data.userId == userId;

        // Allows a user to read their own interaction.
        allow get: if isOwner(userId);

        // Allows a user to list their own interactions.
        allow list: if isOwner(userId);

        // Allows a user to update their own interaction.
        allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;

        // Allows a user to delete their own interaction.
        allow delete: if isExistingOwner(userId);
      }

      /**
       * @description Secures interactions with the AppPrototyper AI agent. Only the user can read and write their own interactions.
       * @path /users/{userId}/appPrototyperInteractions/{interactionId}
       * @allow (create) - User with UID 'user_abc' can create an interaction if request.auth.uid == 'user_abc'.
       * @allow (get) - User with UID 'user_abc' can read their interaction if request.auth.uid == 'user_abc'.
       * @allow (update) - User with UID 'user_abc' can update their interaction if request.auth.uid == 'user_abc'.
       * @allow (delete) - User with UID 'user_abc' can delete their interaction if request.auth.uid == 'user_abc'.
       * @deny (create) - User with UID 'user_xyz' cannot create an interaction for 'user_abc'.
       * @deny (get) - User with UID 'user_xyz' cannot read an interaction of 'user_abc'.
       * @principle Enforces document ownership for writes.
       */
      match /appPrototyperInteractions/{interactionId} {
        // Allows a user to create an interaction if the userId matches their auth UID.
        allow create: if isOwner(userId) && request.resource.data.userId == userId;

        // Allows a user to read their own interaction.
        allow get: if isOwner(userId);

        // Allows a user to list their own interactions.
        allow list: if isOwner(userId);

        // Allows a user to update their own interaction.
        allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;

        // Allows a user to delete their own interaction.
        allow delete: if isExistingOwner(userId);
      }

      /**
       * @description Secures interactions with the AntiqueAuthenticator AI agent. Only the user can read and write their own interactions.
       * @path /users/{userId}/antiqueAuthenticatorInteractions/{interactionId}
       * @allow (create) - User with UID 'user_abc' can create an interaction if request.auth.uid == 'user_abc'.
       * @allow (get) - User with UID 'user_abc' can read their interaction if request.auth.uid == 'user_abc'.
       * @allow (update) - User with UID 'user_abc' can update their interaction if request.auth.uid == 'user_abc'.
       * @allow (delete) - User with UID 'user_abc' can delete their interaction if request.auth.uid == 'user_abc'.
       * @deny (create) - User with UID 'user_xyz' cannot create an interaction for 'user_abc'.
       * @deny (get) - User with UID 'user_xyz' cannot read an interaction of 'user_abc'.
       * @principle Enforces document ownership for writes.
       */
      match /antiqueAuthenticatorInteractions/{interactionId} {
        // Allows a user to create an interaction if the userId matches their auth UID.
        allow create: if isOwner(userId) && request.resource.data.userId == userId;

        // Allows a user to read their own interaction.
        allow get: if isOwner(userId);

        // Allows a user to list their own interactions.
        allow list: if isOwner(userId);

        // Allows a user to update their own interaction.
        allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;

        // Allows a user to delete their own interaction.
        allow delete: if isExistingOwner(userId);
      }

      /**
       * @description Secures payment transactions. Only the user can read and write their own transactions.
       * @path /users/{userId}/paymentTransactions/{transactionId}
       * @allow (create) - User with UID 'user_abc' can create a transaction if request.auth.uid == 'user_abc'.
       * @allow (get) - User with UID 'user_abc' can read their transaction if request.auth.uid == 'user_abc'.
       * @allow (update) - User with UID 'user_abc' can update their transaction if request.auth.uid == 'user_abc'.
       * @allow (delete) - User with UID 'user_abc' can delete their transaction if request.auth.uid == 'user_abc'.
       * @deny (create) - User with UID 'user_xyz' cannot create a transaction for 'user_abc'.
       * @deny (get) - User with UID 'user_xyz' cannot read a transaction of 'user_abc'.
       * @principle Enforces document ownership for writes.
       */
      match /paymentTransactions/{transactionId} {
        // Allows a user to create a transaction if the userId matches their auth UID.
        allow create: if isOwner(userId) && request.resource.data.userId == userId;

        // Allows a user to read their own transaction.
        allow get: if isOwner(userId);

        // Allows a user to list their own transactions.
        allow list: if isOwner(userId);

        // Allows a user to update their own transaction.
        allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;

        // Allows a user to delete their own transaction.
        allow delete: if isExistingOwner(userId);
      }

      // ------------------------------------------------------------------
      // Top-level payment collections used by Cloud Functions
      // Cloud Functions should be the only writer. Clients may read their
      // own resources where applicable (sessions/transactions), but cannot
      // write to these collections directly.
      // ------------------------------------------------------------------

      match /payment_sessions/{sessionId} {
        allow read: if request.auth != null && (
          resource.data.userId == request.auth.uid || resource.data.guest == true
        );
        // Only Cloud Functions may write
        allow write: if false;
        allow list: if false;
      }

      match /payment_transactions/{transactionId} {
        allow read: if request.auth != null && (
          resource.data.userId == request.auth.uid || resource.data.userId == null
        );
        // Only Cloud Functions may write
        allow write: if false;
        allow list: if false;
      }

      match /payment_distributions/{distributionId} {
        // Users can read distributions they initiated
        allow get: if request.auth != null && resource.data.initiatorUserId == request.auth.uid;
        allow list: if false;
        // Only Cloud Functions may write
        allow write: if false;
      }

      match /payment_errors/{errorId} {
        // No client access to error logs
        allow read: if false;
        allow write: if false;
        allow list: if false;
      }
    }
  }
}