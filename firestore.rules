/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for data access.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, representing a user's private data tree.
 * - User profiles are stored directly at /users/{userId}.
 * - Interactions with AI agents (QuranTutor, DoctorAssistant, etc.) and payment transactions are stored as subcollections under each user.
 *
 * Key Security Decisions:
 * - Users can only access their own data.
 * - Listing of user documents (the /users collection itself) is disallowed.
 * - Each document contains a denormalized `userId` to allow for easy and performant ownership checks.
 *
 * Access Control Patterns:
 * - Ownership: Data under `/users/{userId}` and its subcollections is strictly controlled by the user identified by `{userId}`.
 *
 * Denormalization for Authorization:
 * - All interaction documents (e.g., `QuranTutorInteraction`, `DoctorAssistantInteraction`) include the `userId` of the owning user. This denormalization avoids the need for complex `get()` calls in the security rules to verify ownership.
 * - Payment transactions under the `paymentTransactions` subcollection also include the `userId`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Prevents listing all user profiles. Access to individual profiles is controlled by the /users/{userId} rule.
     * @path /users
     * @allow (get) Not applicable; access is controlled by the /users/{userId} rule.
     * @deny (list) Any attempt to list all user profiles.
     * @principle Prevents unauthorized enumeration of user IDs.
     */
    match /users {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to user profiles. Only the authenticated user can read or modify their own profile.
     * @path /users/{userId}
     * @allow (create) An authenticated user creates their own profile.
     * @allow (get) An authenticated user reads their own profile.
     * @allow (update) An authenticated user updates their own profile.
     * @deny (create) An unauthenticated user attempts to create a user profile.
     * @deny (create) An authenticated user attempts to create a profile for a different user ID.
     * @deny (get) An unauthenticated user attempts to read a user profile.
     * @deny (update) An unauthenticated user attempts to update a user profile.
     * @deny (update) An authenticated user attempts to update a profile for a different user ID.
     * @deny (delete) An authenticated user attempts to delete another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to QuranTutor interactions. Only the authenticated user can read or modify their own interactions.
     * @path /users/{userId}/quranTutorInteractions/{interactionId}
     * @allow (create) An authenticated user creates a new QuranTutor interaction under their profile.
     * @allow (get) An authenticated user reads their own QuranTutor interaction.
     * @allow (list) An authenticated user lists their own QuranTutor interactions.
     * @allow (update) An authenticated user updates their own QuranTutor interaction.
     * @deny (create) An unauthenticated user attempts to create a QuranTutor interaction.
     * @deny (create) An authenticated user attempts to create a QuranTutor interaction for a different user ID.
     * @deny (get) An unauthenticated user attempts to read a QuranTutor interaction.
     * @deny (list) An unauthenticated user attempts to list QuranTutor interactions.
     * @deny (update) An unauthenticated user attempts to update a QuranTutor interaction.
     * @deny (update) An authenticated user attempts to update a QuranTutor interaction for a different user ID.
     * @deny (delete) An authenticated user attempts to delete another user's QuranTutor interaction.
     * @principle Enforces document ownership for QuranTutor interactions.
     */
    match /users/{userId}/quranTutorInteractions/{interactionId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to DoctorAssistant interactions. Only the authenticated user can read or modify their own interactions.
     * @path /users/{userId}/doctorAssistantInteractions/{interactionId}
     * @allow (create) An authenticated user creates a new DoctorAssistant interaction under their profile.
     * @allow (get) An authenticated user reads their own DoctorAssistant interaction.
     * @allow (list) An authenticated user lists their own DoctorAssistant interactions.
     * @allow (update) An authenticated user updates their own DoctorAssistant interaction.
     * @deny (create) An unauthenticated user attempts to create a DoctorAssistant interaction.
     * @deny (create) An authenticated user attempts to create a DoctorAssistant interaction for a different user ID.
     * @deny (get) An unauthenticated user attempts to read a DoctorAssistant interaction.
     * @deny (list) An unauthenticated user attempts to list DoctorAssistant interactions.
     * @deny (update) An unauthenticated user attempts to update a DoctorAssistant interaction.
     * @deny (update) An authenticated user attempts to update a DoctorAssistant interaction for a different user ID.
     * @deny (delete) An authenticated user attempts to delete another user's DoctorAssistant interaction.
     * @principle Enforces document ownership for DoctorAssistant interactions.
     */
    match /users/{userId}/doctorAssistantInteractions/{interactionId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to RealEstateAgent interactions. Only the authenticated user can read or modify their own interactions.
     * @path /users/{userId}/realEstateAgentInteractions/{interactionId}
     * @allow (create) An authenticated user creates a new RealEstateAgent interaction under their profile.
     * @allow (get) An authenticated user reads their own RealEstateAgent interaction.
     * @allow (list) An authenticated user lists their own RealEstateAgent interactions.
     * @allow (update) An authenticated user updates their own RealEstateAgent interaction.
     * @deny (create) An unauthenticated user attempts to create a RealEstateAgent interaction.
     * @deny (create) An authenticated user attempts to create a RealEstateAgent interaction for a different user ID.
     * @deny (get) An unauthenticated user attempts to read a RealEstateAgent interaction.
     * @deny (list) An unauthenticated user attempts to list RealEstateAgent interactions.
     * @deny (update) An unauthenticated user attempts to update a RealEstateAgent interaction.
     * @deny (update) An authenticated user attempts to update a RealEstateAgent interaction for a different user ID.
     * @deny (delete) An authenticated user attempts to delete another user's RealEstateAgent interaction.
     * @principle Enforces document ownership for RealEstateAgent interactions.
     */
    match /users/{userId}/realEstateAgentInteractions/{interactionId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to AppPrototyper interactions. Only the authenticated user can read or modify their own interactions.
     * @path /users/{userId}/appPrototyperInteractions/{interactionId}
     * @allow (create) An authenticated user creates a new AppPrototyper interaction under their profile.
     * @allow (get) An authenticated user reads their own AppPrototyper interaction.
     * @allow (list) An authenticated user lists their own AppPrototyper interactions.
     * @allow (update) An authenticated user updates their own AppPrototyper interaction.
     * @deny (create) An unauthenticated user attempts to create a AppPrototyper interaction.
     * @deny (create) An authenticated user attempts to create a AppPrototyper interaction for a different user ID.
     * @deny (get) An unauthenticated user attempts to read a AppPrototyper interaction.
     * @deny (list) An unauthenticated user attempts to list AppPrototyper interactions.
     * @deny (update) An unauthenticated user attempts to update a AppPrototyper interaction.
     * @deny (update) An authenticated user attempts to update a AppPrototyper interaction for a different user ID.
     * @deny (delete) An authenticated user attempts to delete another user's AppPrototyper interaction.
     * @principle Enforces document ownership for AppPrototyper interactions.
     */
    match /users/{userId}/appPrototyperInteractions/{interactionId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to AntiqueAuthenticator interactions. Only the authenticated user can read or modify their own interactions.
     * @path /users/{userId}/antiqueAuthenticatorInteractions/{interactionId}
     * @allow (create) An authenticated user creates a new AntiqueAuthenticator interaction under their profile.
     * @allow (get) An authenticated user reads their own AntiqueAuthenticator interaction.
     * @allow (list) An authenticated user lists their own AntiqueAuthenticator interactions.
     * @allow (update) An authenticated user updates their own AntiqueAuthenticator interaction.
     * @deny (create) An unauthenticated user attempts to create a AntiqueAuthenticator interaction.
     * @deny (create) An authenticated user attempts to create a AntiqueAuthenticator interaction for a different user ID.
     * @deny (get) An unauthenticated user attempts to read a AntiqueAuthenticator interaction.
     * @deny (list) An unauthenticated user attempts to list AntiqueAuthenticator interactions.
     * @deny (update) An unauthenticated user attempts to update a AntiqueAuthenticator interaction.
     * @deny (update) An authenticated user attempts to update a AntiqueAuthenticator interaction for a different user ID.
     * @deny (delete) An authenticated user attempts to delete another user's AntiqueAuthenticator interaction.
     * @principle Enforces document ownership for AntiqueAuthenticator interactions.
     */
    match /users/{userId}/antiqueAuthenticatorInteractions/{interactionId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to PaymentTransaction documents. Only the authenticated user can read or modify their own transactions.
     * @path /users/{userId}/paymentTransactions/{transactionId}
     * @allow (create) An authenticated user creates a new PaymentTransaction document under their profile.
     * @allow (get) An authenticated user reads their own PaymentTransaction document.
     * @allow (list) An authenticated user lists their own PaymentTransaction documents.
     * @allow (update) An authenticated user updates their own PaymentTransaction document.
     * @deny (create) An unauthenticated user attempts to create a PaymentTransaction document.
     * @deny (create) An authenticated user attempts to create a PaymentTransaction document for a different user ID.
     * @deny (get) An unauthenticated user attempts to read a PaymentTransaction document.
     * @deny (list) An unauthenticated user attempts to list PaymentTransaction documents.
     * @deny (update) An unauthenticated user attempts to update a PaymentTransaction document.
     * @deny (update) An authenticated user attempts to update a PaymentTransaction document for a different user ID.
     * @deny (delete) An authenticated user attempts to delete another user's PaymentTransaction document.
     * @principle Enforces document ownership for PaymentTransaction documents.
     */
    match /users/{userId}/paymentTransactions/{transactionId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}